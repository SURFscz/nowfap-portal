---
- include_vars: "ldap.yml"
  tags: always

- name: Ensure the a number of directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  tags: ldap
  with_items:
    - ldap_schemas
    - ldifs
    - downloads

- name: Fetch the eduPerson schema
  become_user: "{{ ansible_user }}"
  become: True
  get_url:
    url: "{{ eduPersonSchema_url }}"
    dest: downloads/
  tags: ldap

# Of course the unarchive module should be used here, but the things is,
# it seems broken in 2.2.0, although it should be fixed in 2.1.1. I guess
# porting the fix to 2.2.0 has been forgotten...
- name: Unzipping downloaded schema
  become_user: "{{ ansible_user }}"
  become: True
  command: unzip -o downloads/{{ eduPersonSchema_zip }} -d /tmp
  tags: ldap

# OpenLDAP does not like adding exisiting entries again. Only add the
# schema if it has not been added already. This does not yet take care
# of changes in the eduPerson schema.
- name: Copy the unpacked ldifs
  copy:
    src: /tmp/{{ eduPersonSchema_ldif }}
    dest: /home/{{ ansible_user }}/ldap_schemas/{{ eduPersonSchema_ldif }}
    remote_src: True
  tags:
    ldap

- name: Check if eduPerson schema is already present
  shell: ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' '(cn=*)' dn | grep 'cn={[0123456789]\+}eduperson,cn=schema,cn=config'
  failed_when: not [0, 1]
  tags:
    ldap
  register:
    eduPersonSchemaPresent

# Based on the success or failure of copying the eduPerson schema add
# the schema to the ldap database. Copying the same file in the previous
# task, would lead to not registering the edoPersonSchema variable.
- name: Ensure the eduPerson schema is added to LDAP
  command: ldapadd -Q -Y EXTERNAL -H ldapi:/// -D "cn=config" -f ldap_schemas/{{ eduPersonSchema_ldif }}
  when: eduPersonSchemaPresent.stdout == ""
  tags:
    ldap

- name: Generating password hash for LDAP admin
  command:
    slappasswd -h {SSHA} -s {{ ldap_admin_passwd }}
  register:
    ldap_root_hash
  tags: ldap

- name: Generate ldif from template
  become_user: "{{ ansible_user }}"
  become: True
  template:
    src: "{{ item }}"
    dest: ldifs/{{ item | basename | regex_replace('.j2', '') }}
    mode: 0644
  with_fileglob:
    - ../templates/*.ldif.j2
  tags: ldap

- name: Starting slapd service
  service:
    name: slapd
    state: started
  tags: ldap

- name: Ensure the ldap admin credentials are set
  command: ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f ldifs/set_root_credentials.ldif
  tags: ldap

- name: Check if DIT has been created before
  command:
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b "{{ basedn }}" "(ou=group)" dn
  tags: ldap
  register: emptyDIT
  failed_when: "emptyDIT.rc not in [0, 32]"

- name: Initialize DIT
  become_user: "{{ ansible_user }}"
  become: True
  command:
    ldapadd -c -x -D cn={{ ldap_admin }},{{ basedn }} -w {{ ldap_admin_passwd }} -f ldifs/initial_setup.ldif
  register: result
  failed_when: "(result.rc not in [0, 68])"
  tags: ldap
  when: emptyDIT.stdout == ""
